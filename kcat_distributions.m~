%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% kcat_distributions
% 
% Shows the cumulative distribution for K values from the BRENDA database
% for the user specified organisms. Each distribution will be splitted into 
% distributions for different metabolic subgroups. 
%
% Ivan Domenzain.  Last edited: 2017-10-19
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [kcatDist_plots, kcatDist_stats] = kcat_distributions(model)
    %path = 'write your repo path here'
    path = '/Users/ivand/Documents/EnzymeConstrained-HMR-GEM';

    %Extract the Data available in KEGG enzyme database
    cd ([path '/ComplementaryScripts/KcatDistributions'])
    [EC_cells, pathGroups] = retrieveKEGGEcs;

    %Structure with all the organisms in KEGG and its corresponging
    %phylogenetic domain
    taxonomyStruct = taxonomy_struct;

    %Extracts all the enzymatic data (Kcat,Km, SA, Mw) queried from BRENDA
    %each value in these files corresponds to the maximum value found for the
    %especific EC number / substrate / organism triplet.
    Kval_files_path='/Users/ivand/Desktop/GECKO-IVAN/K_val';
    Kvalue_name   = string({'KCAT', 'KM', 'SA','MW'});
    [KCAT_data,KM_data, SA_data, MW_data] = enzymes_data(Kval_files_path,...
                                                               Kvalue_name);
    %Organisms to be searched in the BRENDA database, this script will show
    %the cumulative distribution of the Kcat values related to it.
    organism_name = string({'homo sapiens'});
    %Initialize cell arrays size: (number of tax classes)x(number of metabolic
    %subgroups+1) 
    for i=1:length(organism_name)
        for j=1:length(pathGroups{1})+1
            kcat{i}{j} = [];
        end
    end
    met_group = string({'All enzymes','CCM','AFN','ISM'});
    for i=1:length(KCAT_data{1})
        flag = false;
        %Filter EC number match just if it is also present in KEGG (enzyme)
        ec_indx   = find(strcmpi(EC_cells{1},KCAT_data{1}{i}(3:end))~=0);
        if ~isempty(ec_indx)
            %Looks into the KEGG data if the substrate of the entry appears 
            %on the list of natural substrates/products for the EC number
            subs_indx = find(strcmpi(EC_cells{2}{ec_indx},KCAT_data{2}(i))~=0);
            if ~isempty(subs_indx)
                org_name   = extract_orgName(KCAT_data{3}{i});
                
                %For each organism especified by the user
                for j=1:length(organism_name)
                    if strcmpi(organism_name{j},org_name)
                        flag = true;
                        kcat{j}{1}    = [kcat{j}{1}; KCAT_data{4}(i)];
                        %Looks for the pathway associated to each 
                        %element on the ec_indx subset on the metabolic
                        %subgroups and if found appends its K value to 
                        %the corresponding subgroup distribution
                        if ~isempty(EC_cells{5}{ec_indx})
                            for k = 1:length(EC_cells{5}{ec_indx})
                                subDist = find(strcmpi(EC_cells{5}{ec_indx}(k),...
                                                pathGroups{1}));
                                kcat{j}{subDist+1} =...
                                                  [kcat{j}{subDist+1}; KCAT_data{4}(i)];  
                            end
                        end
                    end
                end
            end
        end

    end

   met_group = string({'All enzymes','CCM','AFN','ISM'});
   for i=1:length(organism_name)
    for j=1:length(pathGroups{1})+1
        count = 0;
        if ~isempty(kcat{i}{j})
        	str(j) = met_group(j)+' ('+string(length(kcat{i}{j}))+' / '+...
                     string(median(kcat{i}{j}))+ ')';
            [y_KCAT(j), stats_KCAT(j)] = cdfplot(kcat{i}{j});
            title('Homo sapiens K_{cat} distribution')
                ylabel('Cumulative distribution','FontSize',30,'FontWeight','bold');
                xlabel('K_{cat} [s^{-1}]','FontSize',30,'FontWeight','bold');
                set(gca, 'XScale', 'log')
                hold on
            end
    end
    legend(y_KCAT,str);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function orgName = extract_orgName(str)

    pos1 = strfind(str,'/');
    pos2 = strfind(str,' ');
    if length(pos2)>1
    	pos  = min(pos1(1),pos2(2));
    else
    	pos = pos1(1);
    end
    orgName = str(1:pos-1);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function that queries a metabolic pathway from KEGG and looks if the EC #
% is related to it.

function presence = ECnum_presence(pathway,ec)
   
    URL       = 'http://rest.kegg.jp/get/'+string(pathway);
    path_data = webread(URL);
    path_data = textscan(path_data,'%s','delimiter','\n');
    %Extracts just the lines that relate genes and proteins information
    gene_row = indexes_string(path_data{1},'GENE ',false);
    % Looks if either compound or reference appears first on the data in
    % order to extract just the GENE related part.
    ending   = [indexes_string(path_data{1},'COMPOUND ',true),...
                indexes_string(path_data{1},'REFERENCE ',true)];
    ending   = min(ending);
    extract  = path_data{1}(gene_row:ending-1);
    presence = indexes_string(extract,ec,true);
    if isempty(presence)
        presence = false;
    else
        presence = true;
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function that receives a string and a cell array and returns the indexes
% in which the string appears on the array.
function matching = indexes_string(cell_array,str,flag)
    matching  = strfind(cell_array,str);
    if flag
        matching = find(~cellfun(@isempty,matching),1);
    else
        matching = find(~cellfun(@isempty,matching));
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function that queries the full KEGG organism list and returns a cell array
% containing KEGG codes and names 
function orgList = KEGG_orgList
    URL     = 'http://rest.kegg.jp/list/organism';
    data    = webread(URL);
    data    = textscan(data,'%s %s %s %s','delimiter','\t');
    orgList{1} = data{2};
    orgList{2} = cellfun(@lower,data{3},'UniformOutput',false);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function that explores the KEGG taxonomical tree and creates a cell array
% with all the organisms sorted in their correspondant kingdom of life 
% (Animals / Plants / Fungi / Protists / Bacteria / Archaea).
function taxonomyStruct = taxonomy_struct
    keggPath = '/Volumes/ftp.bioinformatics.jp/kegg/genes/misc';
    fid      = fopen(fullfile(keggPath,'taxonomy'), 'r');
    kingdom   = {};
    Organisms = {};
    while 1
        %Get the next line
        tline = fgetl(fid);
        %Abort at end of file
        if ~ischar(tline)
            break
        else
            if any(tline)
                if tline(2)=='#' && tline(3)~='#'
                    sPos=strfind(tline,' ');
                    kingdom   = [kingdom tline(sPos(1)+1:end)];
                    Organisms{length(kingdom)} = {}; 
                end
                tline = strsplit(tline,'\t');
                if length(tline)==4
                    if strfind(tline{4},'(')
                        tline{4} = tline{4}(1:strfind(tline{4},'(')-2);
                    end    
                    Organisms{length(kingdom)} = [Organisms{length(kingdom)} ...
                                                  lower(tline{4})];
                end
            end
        end
    end
    taxonomyStruct.kingdom   = kingdom;
    taxonomyStruct.organisms = Organisms;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Extract all the enzymatic data (Kcat,Km, SA, Mw) queried from BRENDA
%each value in these files corresponds to the maximum value found for the
%especific EC number / substrate / organism triplet.
function [KCAT_data,KM_data, SA_data, MW_data] = enzymes_data(Kval_files_path,...
                                                              Kvalue_name)
                                                          
    cd (Kval_files_path)
     for i=1:length(Kvalue_name)
        if i==2
            file_name = 'min_' + Kvalue_name(i) + '.txt';
        else
            file_name = 'max_' + Kvalue_name(i) + '.txt';
        end
        fID       = fopen(file_name);

        switch i
            case 1
                KCAT_data = textscan(fID,'%s %s %s %f  %s','delimiter','\t');
            case 2
                KM_data   = textscan(fID,'%s %s %s %f  %s','delimiter','\t');
            case 3
                SA_data   = textscan(fID,'%s %s %s %f  %s','delimiter','\t');
            case 4
                MW_data   = textscan(fID,'%s %s %s %f  %s','delimiter','\t');
        end
        efe = fclose('all');    
     end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
